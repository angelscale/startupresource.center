name: feature

on:
  push:
    branches-ignore:
      - main

concurrency: 
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  GHOST_API_URL: ${{ secrets.GHOST_API_URL }}
  GHOST_CONTENT_API_KEY: ${{ secrets.GHOST_CONTENT_API_KEY }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Prepare Node
        uses: actions/setup-node@v2
        with: 
          node-version: 14.x
      - name: Prepare Dependencies
        run: yarn install
      - name: Lint
        run: yarn lint
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Prepare Node
        uses: actions/setup-node@v2
        with: 
          node-version: 14.x
      - name: Prepare Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            .cache/
            public/
            node_modules/
          key: ${{ runner.os }}-build-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-
      - name: Prepare Dependencies
        run: yarn install
      - name: Build
        run: yarn build
      - name: Upload Package
        uses: actions/upload-artifact@v2
        with:
          name: public
          path: public
      - name: get-env-name
        id: get-env
        uses: actions/github-script@v5
        with:
          script: |
            const branch = context.ref.replace('refs/heads/','')
            core.setOutput('env_name',branch)
    outputs:
      env_name: ${{ steps.get-env.outputs.env_name }}
  deploy-feature:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: ${{ needs.build.outputs.env_name }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Download Package
        uses: actions/download-artifact@v2
        with:
          name: public
          path: public
      - name: Deploy Feature
        id: deploy
        uses: joinflux/firebase-action@master
        with:
          args: hosting:channel:deploy ${{ env.branch }} | tee output.txt && echo \"::set-output name=url::$(grep 'Channel URL' output.txt | grep -o 'https://[^ ]*')\"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
  